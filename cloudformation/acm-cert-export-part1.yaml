AWSTemplateFormatVersion: '2010-09-09'
Description: 'ACM Certificate Export and Installation - Part 1'

Parameters:
  SSMDocumentName:
    Type: String
    Default: Install-ACMCertificate
    Description: Name of the SSM document for certificate installation

Resources:
  # DynamoDB Table
  CertTagMappingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CertTagMapping
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: CertificateArn
          AttributeType: S
      KeySchema:
        - AttributeName: CertificateArn
          KeyType: HASH
      Tags:
        - Key: Purpose
          Value: ACM-Certificate-Export

  # Lambda Execution Role - Without Step Function reference
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ACMCertExportPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - acm:ExportCertificate
                  - acm:DescribeCertificate
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: !GetAtt CertTagMappingTable.Arn
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ssm:ListCommandInvocations
                  - ssm:ListCommands
                Resource: '*'

  # Lambda Functions
  ACMExportLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: acm-Export
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import base64
          import json

          def lambda_handler(event, context):
              cert_arn = event['CertificateArn']
              passphrase = event['Passphrase']
              
              # Export certificate from ACM
              acm_client = boto3.client('acm')
              response = acm_client.export_certificate(
                  CertificateArn=cert_arn,
                  Passphrase=passphrase.encode('utf-8')
              )
              
              # Encode certificate components to base64
              certificate = base64.b64encode(response['Certificate'].encode('utf-8')).decode('utf-8')
              private_key = base64.b64encode(response['PrivateKey'].encode('utf-8')).decode('utf-8')
              certificate_chain = base64.b64encode(response['CertificateChain'].encode('utf-8')).decode('utf-8')
              
              # Return the encoded certificate data
              return {
                  'CertificateArn': cert_arn,
                  'Passphrase': passphrase,
                  'CertName': event.get('CertName', ''),
                  'TargetTagKey': event.get('TargetTagKey', ''),
                  'TargetTagValue': event.get('TargetTagValue', ''),
                  'Certificate': certificate,
                  'PrivateKey': private_key,
                  'CertificateChain': certificate_chain
              }

  CheckAndUpdateMappingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: checkAndUpdateMappingAndSendSSM
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 60
      Environment:
        Variables:
          CERT_TAG_TABLE: !Ref CertTagMappingTable
          SSM_DOCUMENT_NAME: !Ref SSMDocumentName
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import base64
          from datetime import datetime
          
          def lambda_handler(event, context):
              # Extract data from event
              cert_arn = event['CertificateArn']
              passphrase = event['Passphrase']
              cert_name = event.get('CertName', '')
              tag_key = event.get('TargetTagKey', '')
              tag_value = event.get('TargetTagValue', '')
              certificate = event['Certificate']
              private_key = event['PrivateKey']
              certificate_chain = event['CertificateChain']
              
              # Get certificate expiry date
              acm_client = boto3.client('acm')
              cert_details = acm_client.describe_certificate(CertificateArn=cert_arn)
              cert_not_after = cert_details['Certificate']['NotAfter'].isoformat() + 'Z'
              
              # Update DynamoDB
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table(os.environ['CERT_TAG_TABLE'])
              
              table.put_item(
                  Item={
                      'CertificateArn': cert_arn,
                      'Passphrase': passphrase,
                      'CertName': cert_name,
                      'TargetTagKey': tag_key,
                      'TargetTagValue': tag_value,
                      'CertExpiryDate': cert_not_after,
                      'LastExportedDate': datetime.utcnow().isoformat() + 'Z'
                  }
              )
              
              # Run SSM document to install certificate
              ssm_client = boto3.client('ssm')
              response = ssm_client.send_command(
                  Targets=[
                      {
                          'Key': f'tag:{tag_key}',
                          'Values': [tag_value]
                      }
                  ],
                  DocumentName=os.environ['SSM_DOCUMENT_NAME'],
                  Parameters={
                      'CertName': [cert_name],
                      'CertBase64': [certificate],
                      'KeyBase64': [private_key],
                      'ChainBase64': [certificate_chain]
                  }
              )
              
              return {
                  'CommandId': response['Command']['CommandId'],
                  'Status': 'InProgress'
              }            
  CheckCommandStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: checkCommandStatus
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import json

          ssm_client = boto3.client('ssm')

          def lambda_handler(event, context):
              command_id = event['CommandId']

              command = ssm_client.list_commands(CommandId=command_id)
              if command['Commands']:
                  status = command['Commands'][0]['Status']
                  return {'Status': status}

              # Aggregate statuses
              statuses = [inv['Status'] for inv in response['CommandInvocations']]

              if all(s in ['Success'] for s in statuses):
                  return {'Status': 'Success'}

              if any(s in ['Failed', 'Cancelled', 'TimedOut'] for s in statuses):
                  return {'Status': 'Failed'}

              return {'Status': 'InProgress'}


  # Step Function Execution Role
  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionLambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ACMExportLambda.Arn
                  - !GetAtt CheckAndUpdateMappingLambda.Arn
                  - !GetAtt CheckCommandStatusLambda.Arn

  # Step Function State Machine
  ACMExportStateMachine:
    Type: AWS::StepFunctions::StateMachine
    DependsOn: 
      - ACMExportLambda
      - CheckAndUpdateMappingLambda
      - CheckCommandStatusLambda
      - StepFunctionExecutionRole
    Properties:
      StateMachineName: acmExportMachine
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "StartAt": "ExportCertOnly",
          "States": {
            "ExportCertOnly": {
              "Type": "Task",
              "Resource": "${ACMExportLambda.Arn}",
              "Next": "CheckAndUpdateMappingAndSendSSM"
            },
            "CheckAndUpdateMappingAndSendSSM": {
              "Type": "Task",
              "Resource": "${CheckAndUpdateMappingLambda.Arn}",
              "Next": "WaitForStatus"
            },
            "WaitForStatus": {
              "Type": "Wait",
              "Seconds": 15,
              "Next": "CheckCommandStatus"
            },
            "CheckCommandStatus": {
              "Type": "Task",
              "Resource": "${CheckCommandStatusLambda.Arn}",
              "Next": "IsCommandComplete"
            },
            "IsCommandComplete": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Status",
                  "StringEquals": "Success",
                  "Next": "SuccessState"
                },
                {
                  "Variable": "$.Status",
                  "StringEquals": "Failed",
                  "Next": "FailureState"
                }
              ],
              "Default": "WaitForStatus"
            },
            "SuccessState": {
              "Type": "Succeed"
            },
            "FailureState": {
              "Type": "Fail",
              "Error": "SSMCommandFailed",
              "Cause": "The SSM command execution failed"
            }
          }
        }

  # Lambda permission to start Step Function
  LambdaStepFunctionPolicy:
    Type: AWS::IAM::Policy
    DependsOn: ACMExportStateMachine
    Properties:
      PolicyName: LambdaStepFunctionPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource: !Ref ACMExportStateMachine
      Roles:
        - !Ref LambdaExecutionRole

  # API Gateway Role
  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole

  # API Gateway
  ACMExportAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ACMExportAPI
      Description: API for ACM Certificate Export and Installation

  ACMExportResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ACMExportAPI
      ParentId: !GetAtt ACMExportAPI.RootResourceId
      PathPart: export-cert

  # API Gateway permission to invoke Step Function
  APIGatewayStepFunctionPolicy:
    Type: AWS::IAM::Policy
    DependsOn: ACMExportStateMachine
    Properties:
      PolicyName: APIGatewayStepFunctionPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource: !Ref ACMExportStateMachine
      Roles:
        - !Ref APIGatewayRole

  ACMExportMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: 
      - APIGatewayRole
      - APIGatewayStepFunctionPolicy
      - ACMExportStateMachine
    Properties:
      RestApiId: !Ref ACMExportAPI
      ResourceId: !Ref ACMExportResource
      HttpMethod: POST
      AuthorizationType: AWS_IAM  # Using AWS IAM authentication
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
        Credentials: !GetAtt APIGatewayRole.Arn
        RequestTemplates:
          application/json: !Sub |
            {
              "input": "$util.escapeJavaScript($input.json('$'))",
              "stateMachineArn": "${ACMExportStateMachine}"
            }
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200

  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ACMExportMethod
    Properties:
      RestApiId: !Ref ACMExportAPI
      StageName: prod

  # SSM Document for Certificate Installation
  InstallACMCertificateDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: !Ref SSMDocumentName
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: 'Install SSL Certificate files on EC2 with dynamic file naming'
        parameters:
          CertName:
            type: String
            description: 'Base name for the certificate files'
          CertBase64:
            type: String
            description: 'Base64 encoded fullchain certificate'
          KeyBase64:
            type: String
            description: 'Base64 encoded private key'
          ChainBase64:
            type: String
            description: 'Base64 encoded chain certificate'
        mainSteps:
          - action: aws:runShellScript
            name: InstallCertificateFiles
            inputs:
              runCommand:
                - |
                  #!/bin/bash
                  set -e
                  echo "Starting SSL Certificate installation..."

                  CERT_NAME="{{ CertName }}"

                  # Create necessary directories
                  mkdir -p /etc/ssl/certs /etc/ssl/private

                  # Write fullchain.pem
                  echo "{{ CertBase64 }}" | base64 -d > /etc/ssl/certs/${CERT_NAME}-fullchain.pem

                  # Write privkey.pem
                  echo "{{ KeyBase64 }}" | base64 -d > /etc/ssl/private/${CERT_NAME}-privkey.pem

                  # Write chain.pem
                  echo "{{ ChainBase64 }}" | base64 -d > /etc/ssl/certs/${CERT_NAME}-chain.pem

                  # Set proper permissions
                  chmod 644 /etc/ssl/certs/${CERT_NAME}-fullchain.pem
                  chmod 600 /etc/ssl/private/${CERT_NAME}-privkey.pem
                  chmod 644 /etc/ssl/certs/${CERT_NAME}-chain.pem

                  # Ensure ownership is correct
                  chown root:root /etc/ssl/certs/${CERT_NAME}-fullchain.pem
                  chown root:root /etc/ssl/private/${CERT_NAME}-privkey.pem
                  chown root:root /etc/ssl/certs/${CERT_NAME}-chain.pem

                  echo "SSL Certificate installation completed for ${CERT_NAME}."


Outputs:
  DynamoDBTableName:
    Description: Name of the DynamoDB table for certificate mapping
    Value: !Ref CertTagMappingTable
  
  StateMachineArn:
    Description: ARN of the Step Function state machine
    Value: !Ref ACMExportStateMachine
  
  APIEndpoint:
    Description: API Gateway endpoint URL for certificate export
    Value: !Sub https://${ACMExportAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/export-cert